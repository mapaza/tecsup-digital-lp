/**
 * Generated by Verge3D Puzzles v.3.6.1
 * Mon Mar 29 2021 11:47:38 GMT-0500 (hora est√°ndar de Colombia)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};


PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'loading__progress_number', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', false);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["sistemas/equipos"] = sistemas_equipos;
this.procedures["crear_anotaciones_equipos"] = crear_anotaciones_equipos;
this.procedures["explosion"] = explosion;
this.procedures["mostrar_anotaciones_equipos"] = mostrar_anotaciones_equipos;
this.procedures["ensamble"] = ensamble;
this.procedures["crear_anotaciones_sistemas"] = crear_anotaciones_sistemas;
this.procedures["ocultar_anotaciones_equipos"] = ocultar_anotaciones_equipos;
this.procedures["ocultar_anotaciones_sistemas"] = ocultar_anotaciones_sistemas;
this.procedures["reset_animations"] = reset_animations;
this.procedures["mostrar_anotaciones_sistemas"] = mostrar_anotaciones_sistemas;
this.procedures["general"] = general;
this.procedures["funcionamiento"] = funcionamiento;
this.procedures["getCameraPosition"] = getCameraPosition;
this.procedures["outline_drawline"] = outline_drawline;
this.procedures["getCameraPosition2"] = getCameraPosition2;

var PROC = {
    "sistemas/equipos": sistemas_equipos,
    "crear_anotaciones_equipos": crear_anotaciones_equipos,
    "explosion": explosion,
    "mostrar_anotaciones_equipos": mostrar_anotaciones_equipos,
    "ensamble": ensamble,
    "crear_anotaciones_sistemas": crear_anotaciones_sistemas,
    "ocultar_anotaciones_equipos": ocultar_anotaciones_equipos,
    "ocultar_anotaciones_sistemas": ocultar_anotaciones_sistemas,
    "reset_animations": reset_animations,
    "mostrar_anotaciones_sistemas": mostrar_anotaciones_sistemas,
    "general": general,
    "funcionamiento": funcionamiento,
    "getCameraPosition": getCameraPosition,
    "outline_drawline": outline_drawline,
    "getCameraPosition2": getCameraPosition2,
};

var reference_point, tag, object, referencia, barandas, annotations, position, lookat, toelemnt, objetc_select, evento, paneo, x, x_2, y, y_2, escena, z, z_2, punto_referencia, etq__tags;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}





/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// drawLineObjectHTML and removeLineObjectHTML puzzles
function operateLineObjectHTML(objNames, id, isParent, width, color, offset, op) {
    var elem = getElement(id, isParent);
    if (!elem && (op == "DRAW"))
        return;
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj) continue;

        for (var j = obj.children.length - 1; j >= 0; j--) {
            var child = obj.children[j];
            if (child.isLineHTML) {
                obj.remove(child);
                child.geometry.dispose();
                child.material.dispose();
            }
        }

        if (op == "DRAW") {
            var line = new v3d.LineHTML(new v3d.Color(color).convertSRGBToLinear(),
                    width);
            line.offset = offset;
            line.elemHTML = elem;
            obj.add(line);
        }
    }
}


// Describe this function...
function sistemas_equipos(reference_point, tag, object, referencia) {
  if (evento == 'sistemas') {
    setHTMLElemStyle('display', 'none', 'description', false);
    setHTMLElemStyle('display', 'none', 'eq__nombre', false);
    setHTMLElemStyle('display', 'none', 'logo__quellaveco', false);
    getCameraPosition();
    ocultar_anotaciones_sistemas();
    evento = 'equipos';
    reference_point += '_dialog';
    setHTMLElemAttribute('style', 'width: 100px; border-color: #4DFFFF;', reference_point, false);
    setHTMLElemAttribute('style', 'display: none;', 'navigation', false);
    tweenCamera(referencia, object, 1.5, function() {
      setHTMLElemStyle('display', 'flex', annotations, false);
      setHTMLElemStyle('display', 'block', tag, false);
      setHTMLElemAttribute('style', 'background-image: url(\'media/close.svg\'); top: 0; left: 0;', punto_referencia, false);
    }, 0);
  } else if (evento == 'equipos') {
    paneo = true;
    outline(['ALL_OBJECTS'], 'DISABLE');
    setHTMLElemStyle('backgroundImage', 'url(\'media/button.svg\')', annotations, false);
    setHTMLElemStyle('display', 'none', annotations, false);
    setHTMLElemStyle('display', 'none', tag, false);
    setHTMLElemStyle('display', 'none', etq__tags, false);
    setHTMLElemAttribute('style', 'display: none', reference_point, false);
    ocultar_anotaciones_equipos();
    reference_point += '_dialog';
    setHTMLElemStyle('display', 'none', reference_point, false);
    operateLineObjectHTML(['ALL_OBJECTS'], '', false, '', '', '', 'REMOVE');
    evento = 'sistemas';
    tweenCamera([x, y, z], object, 1, function() {
      setHTMLElemAttribute('style', 'background-image: url(\'media/plus.svg\'); top: 0; left: 0;', punto_referencia, false);
      mostrar_anotaciones_sistemas();
      setHTMLElemAttribute('style', 'display: flex;', 'navigation', false);
    }, 0);
  }
}


// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objNames, contents, id) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                obj.remove(child);
                appInstance.container.removeChild(child.annotation);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = annot;
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}


// Describe this function...
function crear_anotaciones_equipos() {
  handleAnnot(true, '1', 'ant_1_tuberia_de_alimentacion', 'Tuber√≠a de alimentaci√≥n', '11');
  handleAnnot(true, '2', 'ant_2_manometro_del_distribuidor', 'Man√≥metro', '12');
  handleAnnot(true, '3', 'ant_3_tuberia_de_distribuicion', 'Tuber√≠a de distribuci√≥n', '13');
  handleAnnot(true, '8', 'ant_2_alimentacion_hidrociclon', 'Alimentaci√≥n del hidrocicl√≥n', '32');
  handleAnnot(true, '9', 'ant_3_descarga_de_finos', 'Tuber√≠a de descarga de finos', '33');
  handleAnnot(true, '10', 'ant_3_descarga_de_gruesos', 'Apex', '34');
  handleAnnot(true, '6', 'ant_4_vortex', 'Vortex', '35');
  handleAnnot(true, '6', 'ant_5_cyclowash', 'Cyclowash', '36');
  handleAnnot(true, '11', 'ant_6_tuberia_de_descarga', 'Tuber√≠a de descarga', '41');
  handleAnnot(true, '12', 'ant_2_tuberia_descarga_gruesos', 'Tuber√≠a de descarga', '52');
}


// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}


// Describe this function...
function explosion() {
  tweenCamera('ex_pos', 'ex_dir', 2, function() {

    operateAnimation('PLAY', getAnimations(['GROUP', 'Animacion']), 1, 420, 'LoopOnce', 5,
            function() {
      tweenCamera('hidro_pos', 'hidro_dir', 4, function() {
        changeVis(barandas, false);

        operateAnimation('PLAY', getAnimations(['GROUP', 'hidrociclon_solo']), 500, 1140, 'LoopOnce', 5,
                function() {
          tweenCamera('ex_pos', 'ex_dir', 1, function() {}, 1);
          setHTMLElemStyle('display', 'flex', 'navigation', false);
          mostrar_anotaciones_sistemas();
        }, undefined, false);

            }, 1);
    }, undefined, false);

        }, 1);
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}


// Describe this function...
function mostrar_anotaciones_equipos() {
  setHTMLElemStyle('display', 'block', annotations, false);
}

// Describe this function...
function ensamble() {
  setHTMLElemStyle('display', 'none', 'navigation', false);
  tweenCamera('hidro_pos', 'hidro_dir', 4, function() {

    operateAnimation('PLAY', getAnimations(['GROUP', 'hidrociclon_solo']), 500, 1140, 'LoopOnce', 4,
            function() {
      changeVis(barandas, true);
      tweenCamera('ex_pos', 'ex_dir', 2, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'Animacion']), 1, 420, 'LoopOnce', 4,
                function() {
          setHTMLElemStyle('display', 'flex', 'navigation', false);
          mostrar_anotaciones_sistemas();
        }, undefined, true);

            }, 1);
    }, undefined, true);

        }, 1);
}

// Describe this function...
function crear_anotaciones_sistemas() {
  handleAnnot(true, '1', 'ant_1_distribuidor_radial', 'atr√°s', '1');
  handleAnnot(true, '2', 'ant_2_valvula_cuchilla', 'atr√°s', '2');
  handleAnnot(true, '3', 'ant_3_hidrociclon', 'atr√°s', '3');
  handleAnnot(true, '4', 'ant_4_canaleta_de_finos', 'atr√°s', '4');
  handleAnnot(true, '5', 'ant_5_canaleta_de_gruesos', 'atr√°s', '5');
  setHTMLElemStyle('backgroundImage', 'url(\'media/plus.svg\')', '1', false);
  setHTMLElemStyle('backgroundImage', 'url(\'media/plus.svg\')', '2', false);
  setHTMLElemStyle('backgroundImage', 'url(\'media/plus.svg\')', '3', false);
  setHTMLElemStyle('backgroundImage', 'url(\'media/plus.svg\')', '4', false);
  setHTMLElemStyle('backgroundImage', 'url(\'media/plus.svg\')', '5', false);
  setHTMLElemStyle('display', 'none', '1_dialog', false);
  setHTMLElemStyle('display', 'none', '2_dialog', false);
  setHTMLElemStyle('display', 'none', '3_dialog', false);
  setHTMLElemStyle('display', 'none', '4_dialog', false);
  setHTMLElemStyle('display', 'none', '5_dialog', false);
}

// Describe this function...
function ocultar_anotaciones_equipos() {
  setHTMLElemStyle('display', 'none', annotations, false);
}

// Describe this function...
function ocultar_anotaciones_sistemas() {
  setHTMLElemStyle('display', 'none', '1', false);
  setHTMLElemStyle('display', 'none', '2', false);
  setHTMLElemStyle('display', 'none', '3', false);
  setHTMLElemStyle('display', 'none', '4', false);
  setHTMLElemStyle('display', 'none', '5', false);
}

// Describe this function...
function reset_animations() {

  operateAnimation('STOP', getAnimations(['ALL_OBJECTS']), null, null, 'AUTO', 1,
          function() {}, undefined, false);

      }

// Describe this function...
function mostrar_anotaciones_sistemas() {
  setHTMLElemStyle('display', 'flex', '1', false);
  setHTMLElemStyle('display', 'flex', '2', false);
  setHTMLElemStyle('display', 'flex', '3', false);
  setHTMLElemStyle('display', 'flex', '4', false);
  setHTMLElemStyle('display', 'flex', '5', false);
}


/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var hasSkinning = firstSubmesh.isSkinnedMesh;
            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasSkinning || hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasSkinning) {
                    newMat.skinning = true;
                }

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}


// Describe this function...
function general() {
  setHTMLElemStyle('display', 'none', 'leyenda', false);
  changeVis(['GROUP', 'ocultar'], true);
  changeVis(['GROUP', 'tuberias_con_agua'], true);
  changeVis(['GROUP', 'hidrociclon_solo'], true);
  changeVis('tuberia_de_alimentacion.001', true);
  changeVis(['GROUP', 'funcionamiento'], false);
  changeVis(['GROUP', 'corte_equipo'], false);
  changeVis(['GROUP', 'cortados'], false);
  assignMat('tuberia_de_alimentacion.001', 'partes');
  assignMat('distribuidor_radial', 'partes');
  assignMat(['Cylinder16524', 'Cylinder16524.005', 'Cylinder16524.007', 'Cylinder16524.003', 'Cylinder16524.009', 'Cylinder16524.011'], 'partes');
  assignMat(['tuberia_de_distribucion_a', 'tuberia_de_distribucion_b', 'tuberia_de_distribucion_a.003', 'tuberia_de_distribucion_a.005', 'tuberia_de_distribucion_b.003', 'tuberia_de_distribucion_b.005', 'tuberia_de_distribucion_c.003', 'tuberia_de_distribucion_c', 'tuberia_de_distribucion_c.005', 'tuberia_de_distribucion_a.007', 'tuberia_de_distribucion_b.007', 'tuberia_de_distribucion_c.007', 'tuberia_de_distribucion_a.009', 'tuberia_de_distribucion_b.009', 'tuberia_de_distribucion_c.009', 'tuberia_de_distribucion_a.011', 'tuberia_de_distribucion_c.011', 'tuberia_de_distribucion_b.011'], 'hidrociclon');
}

// Describe this function...
function funcionamiento() {
  setHTMLElemStyle('display', 'block', 'sis__funcionamiento', false);
  ocultar_anotaciones_sistemas();
  changeVis(['GROUP', 'ocultar'], false);
  changeVis(['GROUP', 'tuberias_con_agua'], false);
  changeVis(['GROUP', 'hidrociclon_solo'], false);
  changeVis('tuberia_de_alimentacion.001', false);
  changeVis(['GROUP', 'funcionamiento'], true);
  changeVis(['GROUP', 'corte_equipo'], true);
  changeVis(['GROUP', 'cortados'], true);
  assignMat('tuberia_de_alimentacion.001', 'transparente');
  assignMat('distribuidor_radial', 'transparente');
  assignMat(['Cylinder16524', 'tuberia_de_distribucion_a', 'tuberia_de_distribucion_b', 'Cylinder16524.003', 'tuberia_de_distribucion_a.003', 'tuberia_de_distribucion_b.003', 'tuberia_de_distribucion_c.003', 'tuberia_de_distribucion_c', 'Cylinder16524.005', 'tuberia_de_distribucion_a.005', 'tuberia_de_distribucion_b.005', 'tuberia_de_distribucion_c.005', 'Cylinder16524.007', 'tuberia_de_distribucion_a.007', 'tuberia_de_distribucion_b.007', 'tuberia_de_distribucion_c.007', 'Cylinder16524.009', 'tuberia_de_distribucion_a.009', 'tuberia_de_distribucion_b.009', 'tuberia_de_distribucion_c.009', 'Cylinder16524.011', 'tuberia_de_distribucion_a.011', 'tuberia_de_distribucion_b.011', 'tuberia_de_distribucion_c.011'], 'transparente');
  tweenCamera('func_pos_1_alimentacion', 'func_dir_1_alimentacion', 1, function() {}, 0);
}


function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}


// Describe this function...
function getCameraPosition() {
  x = getObjTransform('Camera', 'position', 'x');
  y = getObjTransform('Camera', 'position', 'y');
  z = getObjTransform('Camera', 'position', 'z');
}

// Describe this function...
function outline_drawline(position, lookat, toelemnt, objetc_select) {
  outline(['ALL_OBJECTS'], 'DISABLE');
  setHTMLElemStyle('display', 'none', 'eq__nombre', false);
  setHTMLElemStyle('display', 'none', 'logo__quellaveco', false);
  setHTMLElemStyle('display', 'none', 'description', false);
  if (paneo) {
    ocultar_anotaciones_equipos();
    paneo = false;
    getCameraPosition2();
    outline(objetc_select, 'ENABLE');
    tweenCamera(position, lookat, 1.5, function() {}, 1);
    setHTMLElemStyle('backgroundImage', 'url(\'media/close.svg\')', toelemnt, false);
    setHTMLElemStyle('display', 'block', toelemnt, false);
    setHTMLElemStyle('display', 'none', punto_referencia, false);
    if (annotations == 'nada') {
      ocultar_anotaciones_sistemas();
      setHTMLElemStyle('display', 'block', toelemnt, false);
    }
  } else {
    paneo = true;
    setHTMLElemStyle('display', 'block', annotations, false);
    tweenCamera([x_2, y_2, z_2], objetc_select, 1, function() {}, 1);
    setHTMLElemStyle('backgroundImage', 'url(\'media/button.svg\')', toelemnt, false);
    setHTMLElemStyle('display', 'block', punto_referencia, false);
    if (annotations == 'nada') {
      mostrar_anotaciones_sistemas();
    }
  }
}

// Describe this function...
function getCameraPosition2() {
  x_2 = getObjTransform('Camera', 'position', 'x');
  y_2 = getObjTransform('Camera', 'position', 'y');
  z_2 = getObjTransform('Camera', 'position', 'z');
}


barandas = ['barandas_piso', 'soporte_derecho', null, 'soporte_frontal', 'soporte_izquierdo', null, 'soporte_trasero', 'piso'];

annotations = ['11', '12', '13', '23', '31', '32', '33', '34', '35', '36', '41', '52'];
crear_anotaciones_equipos();
crear_anotaciones_sistemas();
mostrar_anotaciones_sistemas();
ocultar_anotaciones_equipos();
changeVis(['GROUP', 'cortados'], false);
changeVis(['GROUP', 'corte_equipo'], false);
changeVis(['GROUP', 'funcionamiento'], false);
escena = 'home';

eventHTMLElem('click', 'btn__home', false, function(event) {
  setHTMLElemStyle('display', 'flex', 'eq__nombre', false);
  setHTMLElemStyle('display', 'flex', 'logo__quellaveco', false);
  setHTMLElemStyle('display', 'flex', 'description', false);
  if (escena == 'explosion') {
    ocultar_anotaciones_equipos();
    ocultar_anotaciones_sistemas();
    ensamble();
  } else if (escena == 'animation') {
    setHTMLElemStyle('display', 'none', 'sis__funcionamiento', false);
    tweenCamera('ex_pos', 'ex_dir', 2, function() {}, 1);
    general();
    mostrar_anotaciones_sistemas();
  } else if (escena == 'slice') {
  }
  escena = 'home';
});

evento = 'sistemas';
eventHTMLElem('click', 'btn__explosion', false, function(event) {
  setHTMLElemStyle('display', 'none', 'navigation', false);
  if (escena == 'home') {
    ocultar_anotaciones_sistemas();
    setHTMLElemStyle('display', 'none', 'description', false);
    setHTMLElemStyle('display', 'none', 'eq__nombre', false);
    explosion();
  } else if (escena == 'animation') {
    setHTMLElemStyle('display', 'none', 'sis__funcionamiento', false);
    escena = 'explosion';
    general();
    explosion();
  } else if (escena == 'slice') {
  }
  escena = 'explosion';
});

paneo = true;
eventHTMLElem('click', 'sis__1', false, function(event) {
  sistemas_equipos('1', 'sis__1', 'ge_dir_1_dist_radial', 'ge_pos_1_dist_radial');
});
eventHTMLElem('click', 'sis__2', false, function(event) {
  sistemas_equipos('2', 'sis__2', 'ge_dir_2_valv_cuchilla', 'ge_pos_2_valv_cuchilla');
});
eventHTMLElem('click', 'sis__3', false, function(event) {
  sistemas_equipos('3', 'sis__3', 'ge_dir_3_hidrociclon', 'ge_pos_3_hidrociclon');
});
eventHTMLElem('click', 'sis__4', false, function(event) {
  sistemas_equipos('4', 'sis__4', 'ge_dir_4_cana_finos', 'ge_pos_4_cana_finos');
});
eventHTMLElem('click', 'sis__5', false, function(event) {
  sistemas_equipos('5', 'sis__5', 'ge_dir_5_cana_gruesos', 'ge_pos_5_cana_gruesos');
});

eventHTMLElem('click', '1', false, function(event) {
  if (evento == 'sistemas') {
    outline('distribuidor_radial', 'ENABLE');
    outline('tuberia_de_alimentacion.001', 'ENABLE');
  }
  annotations = ['11', '12', '13'];
  punto_referencia = '1';
  sistemas_equipos('1', 'sis__1', 'ge_dir_1_dist_radial', 'ge_pos_1_dist_radial');
});
eventHTMLElem('click', '2', false, function(event) {
  if (evento == 'sistemas') {
    outline('valvula_cuchilla.020', 'ENABLE');
    outline('valvula_cuchilla.002', 'ENABLE');
  }
  annotations = ['21', '22', '23'];
  punto_referencia = '2';
  sistemas_equipos('2', 'sis__2', 'ge_dir_2_valv_cuchilla', 'ge_pos_2_valv_cuchilla');
});

eventHTMLElem('click', '3', false, function(event) {
  if (evento == 'sistemas') {
    outline('Helix027', 'ENABLE');
    outline('Line130506', 'ENABLE');
    outline('descarga_finos', 'ENABLE');
    outline('Object13245', 'ENABLE');
    outline('Object13240', 'ENABLE');
    outline('Line130505', 'ENABLE');
    outline('cyclowash', 'ENABLE');
  }
  annotations = [null, '32', '33', '34', '35', '36'];
  punto_referencia = '3';
  sistemas_equipos('3', 'sis__3', 'ge_dir_3_hidrociclon', 'ge_pos_3_hidrociclon');
});
eventHTMLElem('click', '4', false, function(event) {
  if (evento == 'sistemas') {
    outline('canaleta_de_finos', 'ENABLE');
    outline('descarga_de_finos', 'ENABLE');
  }
  annotations = '41';
  punto_referencia = '4';
  sistemas_equipos('4', 'sis__4', 'ge_dir_4_cana_finos', 'ge_pos_4_cana_finos');
});
eventHTMLElem('click', '5', false, function(event) {
  if (evento == 'sistemas') {
    outline('canaleta_de_gruesos', 'ENABLE');
  }
  annotations = ['51', '52'];
  punto_referencia = '5';
  sistemas_equipos('5', 'sis__5', 'ge_dir_5_cana_gruesos', 'ge_pos_5_cana_gruesos');
});

eventHTMLElem('click', '11', false, function(event) {
  outline_drawline('rad_pos_1_tubo_alimentacion', 'rad_dir_1_tubo_alimentacion', '11', 'tuberia_de_alimentacion.001');
});
eventHTMLElem('click', '12', false, function(event) {
  outline_drawline('rad_pos_2_manometro', 'rad_dir_2_manometro', '12', 'manometro_distribuidor_a');
});
eventHTMLElem('click', '13', false, function(event) {
  outline_drawline('rad_pos_3_tub_distribucion', 'rad_dir_3_tub_distribucion', '13', 'Cylinder16524.003');
});
eventHTMLElem('click', '35', false, function(event) {
  outline_drawline('hidro_pos_5_vortex', 'hidro_dir_5_vortex', '35', 'Object13246');
});
eventHTMLElem('click', '36', false, function(event) {
  outline_drawline('hidro_pos_6_cyclowash', 'hidro_dir_6_cyclowash', '36', 'cyclowash');
});

eventHTMLElem('click', '32', false, function(event) {
  outline_drawline('hidro_pos_2_alim_hidro', 'hidro_dir_2_alim_hidro', '32', 'Object13248');
});
eventHTMLElem('click', '33', false, function(event) {
  outline_drawline('hidro_pos_3_descarga_finos', 'hidro_dir_3_descarga_finos', '33', 'descarga_finos');
});
eventHTMLElem('click', '34', false, function(event) {
  outline_drawline('hidro_pos_4_descarga_gruesos', 'hidro_dir_4_descarga_gruesos', '34', 'ant_4_descarga_de_gruesos');
});
eventHTMLElem('click', '41', false, function(event) {
  outline_drawline('ge_pos_6_tub_descarga', 'ge_dir_6_tub_descarga', '41', 'descarga_de_finos');
});
eventHTMLElem('click', '52', false, function(event) {
  outline_drawline('gru_pos_2_descarga_gruesos', 'gru_dir_2_descarga_gruesos', '52', 'tuberia_descarga_gruesos');
});

eventHTMLElem('click', 'btn__animacion', false, function(event) {
  if (escena == 'explosion') {
    ocultar_anotaciones_sistemas();
    ocultar_anotaciones_equipos();
    setHTMLElemStyle('display', 'none', 'navigation', false);
    changeVis(barandas, true);

    operateAnimation('PLAY', getAnimations(['GROUP', 'hidrociclon_solo']), 500, 1140, 'LoopOnce', 4,
            function() {
      tweenCamera('ex_pos', 'ex_dir', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'Animacion']), 1, 420, 'LoopOnce', 4,
                function() {
          setHTMLElemStyle('display', 'flex', 'navigation', false);
          setHTMLElemStyle('display', 'flex', 'leyenda', false);
          funcionamiento();
        }, undefined, true);

            }, 1);
    }, undefined, true);

        } else if (escena == 'home') {
    setHTMLElemStyle('display', 'none', 'description', false);
    setHTMLElemStyle('display', 'none', 'eq__nombre', false);
    setHTMLElemStyle('display', 'flex', 'leyenda', false);
    funcionamiento();
  } else if (escena == 'slice') {
  }
  escena = 'animation';
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
